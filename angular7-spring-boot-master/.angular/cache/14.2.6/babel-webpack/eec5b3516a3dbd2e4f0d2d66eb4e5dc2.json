{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../service/database.service\";\nimport * as i2 from \"../../service/authentication.service\";\n\nfunction ViewLoggedExpensesComponent_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"div\", 4);\n    i0.ɵɵelementStart(2, \"div\", 4)(3, \"div\", 5);\n    i0.ɵɵtext(4, \" jjjj \");\n    i0.ɵɵelement(5, \"div\", 0);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementContainerEnd();\n  }\n}\n\nexport let ViewLoggedExpensesComponent = /*#__PURE__*/(() => {\n  class ViewLoggedExpensesComponent {\n    constructor(database, loginService) {\n      this.database = database;\n      this.loginService = loginService;\n      this.expenseDataChart = [];\n      this.expenseDataTable = [];\n      this.metrics = [];\n      this.isLoadingExpenses = true;\n      this.isDataReady = false;\n      this.date = new Date(new Date().getFullYear(), new Date().getMonth() - 2, new Date().getDate());\n      this.categoryDate = new Date();\n      this.loginService.userIdSetAnnounced$.subscribe(category => {\n        this.getUserExpenses();\n      });\n    }\n\n    ngOnInit() {\n      this.getUserExpenses();\n      setTimeout(() => this.scrollTop());\n    }\n\n    scrollTop() {\n      const contentElement = document.getElementById('content'); //contentElement.scrollIntoView();\n    }\n\n    getUserExpenses() {\n      const currentUser = this.loginService.getUser() ? this.loginService.getUser().userName : null;\n\n      if (currentUser) {// this.database.getUserDetails(currentUser)\n        //   .then(jsonData => {\n        //     const obj = jsonData.toJSON();\n        //     const key = Object.keys(obj)[0];\n        //     this.loginService.setUserId(key);\n        //     this.subToExpensesChange();\n        //     this.getUserCategories();\n        //   }).catch(e => {\n        // });\n      }\n    }\n\n    checkDate(e, prop) {\n      this[prop] = e;\n    }\n\n    getUserCategories() {// this.database.getCurrentCategories(this.loginService.getUserId())\n      //   .then(jsonData => {\n      //     const obj = jsonData.toJSON();\n      //     const categoriesArr = Object.keys(obj).map((key) => obj[key]);\n      //     this.loginService.setCategories(categoriesArr);\n      //   }).catch(e => {\n      // })\n    }\n\n    subToExpensesChange() {\n      const userId = Number(this.loginService.getUserId());\n      this.isLoadingExpenses = true;\n\n      if (userId) {\n        this.expenses = this.database.getUserExpenses(userId).subscribe(snapshots => this.filterData(snapshots));\n      } else {\n        this.isLoadingExpenses = false;\n      }\n    }\n\n    parseData(snapsShots) {\n      const data = [];\n      snapsShots.forEach(snapshot => {\n        const expense = snapshot.payload.exportVal();\n        expense.id = snapshot.key;\n        data.push(expense);\n      });\n      return data;\n    }\n\n    filterData(snapshots) {\n      this.isLoadingExpenses = false;\n      const parsedData = this.parseData(snapshots);\n      const firstDate = new Date(Math.min.apply(null, parsedData.map(e => new Date(e.date))));\n      const lastDate = new Date(Math.max.apply(null, parsedData.map(e => new Date(e.date))));\n      const numOfEntries = parsedData.length;\n      const totalAmount = this.getTotal(parsedData);\n      this.metrics = [{\n        color: null,\n        value: firstDate.toDateString().slice(3, 15),\n        metricTitle: 'First Expense Date',\n        icon: 'today'\n      }, {\n        color: null,\n        value: lastDate.toDateString().slice(3, 15),\n        metricTitle: 'Latest Expense Date',\n        icon: 'today'\n      }, {\n        color: null,\n        value: numOfEntries,\n        metricTitle: 'Number of Expenses',\n        icon: 'receipt'\n      }, {\n        color: 'money-icon',\n        value: totalAmount,\n        metricTitle: 'Total Amount',\n        icon: 'attach_money'\n      }];\n      this.categories = parsedData.map(item => item.category).filter((value, index, self) => self.indexOf(value) === index);\n      const pieData = [];\n\n      for (const category of this.categories) {\n        let categorySum = 0;\n\n        for (const value of parsedData) {\n          if (value.category === category) {\n            categorySum += value.amount;\n          }\n        }\n\n        const dataObj = {\n          name: category,\n          y: categorySum,\n          value: categorySum.toFixed(2)\n        };\n        pieData.push(dataObj);\n      }\n\n      this.expenseDataChart = pieData;\n      this.expenseDataTable = parsedData;\n      this.isDataReady = true;\n      this.isLoadingExpenses = false;\n    }\n\n    getTotal(expenses) {\n      let categorySum = 0;\n\n      for (const expense of expenses) {\n        categorySum += expense.amount;\n      }\n\n      return categorySum.toFixed(2);\n    }\n\n    getCategoryTotals(expenses) {// const categories = expenses\n      //   .map(item => item.category)\n      //   .filter((value, index, self) => self.indexOf(value) === index);\n      // const totals = [];\n      // for (const category of categories) {\n      //   let categorySum = 0;\n      //   for (const value of expenses) {\n      //     if (value.category === category) {\n      //       categorySum += value.amount as number;\n      //     }\n      //   }\n      //   const dataObj = {name: category, amount: categorySum.toFixed(2)};\n      //   totals.push(dataObj);\n      // }\n      // return totals.toString();\n    }\n\n    ngOnDestroy() {\n      if (this.expenses) {\n        this.expenses.unsubscribe();\n      }\n    }\n\n  }\n\n  ViewLoggedExpensesComponent.ɵfac = function ViewLoggedExpensesComponent_Factory(t) {\n    return new (t || ViewLoggedExpensesComponent)(i0.ɵɵdirectiveInject(i1.DatabaseService), i0.ɵɵdirectiveInject(i2.AuthenticationService));\n  };\n\n  ViewLoggedExpensesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ViewLoggedExpensesComponent,\n    selectors: [[\"app-view-logged-expenses\"]],\n    decls: 5,\n    vars: 2,\n    consts: [[1, \"app-table-summary\"], [\"app-table-summary\", \"\"], [\"id\", \"view-expense\", 1, \"container-fluid\"], [4, \"ngIf\", \"ngIfElse\"], [1, \"row\"], [1, \"col-12\"]],\n    template: function ViewLoggedExpensesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtext(0, \"jjjj \");\n        i0.ɵɵelement(1, \"div\", 0)(2, \"div\", 1);\n        i0.ɵɵelementStart(3, \"div\", 2);\n        i0.ɵɵtemplate(4, ViewLoggedExpensesComponent_ng_container_4_Template, 6, 0, \"ng-container\", 3);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", !ctx.isLoadingExpenses && ctx.expenseDataChart.length !== 0)(\"ngIfElse\", ctx.noData);\n      }\n    },\n    styles: [\"#view-expense[_ngcontent-%COMP%]   chart[_ngcontent-%COMP%]{width:100%!important;margin:0 auto;display:block}#view-expense[_ngcontent-%COMP%]   .card[_ngcontent-%COMP%]{margin-bottom:20px}#view-expense[_ngcontent-%COMP%]   button.fab[_ngcontent-%COMP%]{position:fixed;bottom:10%;right:5%;z-index:100}#view-expense[_ngcontent-%COMP%]   .month-date-picker[_ngcontent-%COMP%]{font-size:14px;width:40%}#view-expense[_ngcontent-%COMP%]   .no-data[_ngcontent-%COMP%]   .mat-icon[_ngcontent-%COMP%]{width:auto}#view-expense[_ngcontent-%COMP%]   .no-data[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%]{text-align:center}\"]\n  });\n  return ViewLoggedExpensesComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}