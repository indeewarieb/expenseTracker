{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet ViewLoggedExpensesComponent = class ViewLoggedExpensesComponent {\n  constructor(database, loginService) {\n    this.database = database;\n    this.loginService = loginService;\n    this.expenseDataChart = [];\n    this.expenseDataTable = [];\n    this.metrics = [];\n    this.isLoadingExpenses = true;\n    this.isDataReady = false;\n    this.date = new Date(new Date().getFullYear(), new Date().getMonth() - 2, new Date().getDate());\n    this.categoryDate = new Date();\n    this.loginService.userIdSetAnnounced$.subscribe(category => {\n      this.getUserExpenses();\n    });\n  }\n\n  ngOnInit() {\n    this.getUserExpenses();\n    setTimeout(() => this.scrollTop());\n  }\n\n  scrollTop() {\n    const contentElement = document.getElementById('content'); //contentElement.scrollIntoView();\n  }\n\n  getUserExpenses() {\n    this.database.getUserExpenses(this.loginService.getUserId()).pipe(first()).subscribe(data => {\n      this.isLoading = false;\n      expenseForm.resetForm();\n      this.resetExpenseObj();\n      this.showSnackBar();\n      this.announceChange();\n    }, error => {\n      this.isLoading = false;\n      console.log('Failed');\n    });\n  }\n\n  checkDate(e, prop) {\n    this[prop] = e;\n  }\n\n  getUserCategories() {// this.database.getCurrentCategories(this.loginService.getUserId())\n    //   .then(jsonData => {\n    //     const obj = jsonData.toJSON();\n    //     const categoriesArr = Object.keys(obj).map((key) => obj[key]);\n    //     this.loginService.setCategories(categoriesArr);\n    //   }).catch(e => {\n    // })\n  }\n\n  subToExpensesChange() {\n    const userId = Number(this.loginService.getUserId());\n    this.isLoadingExpenses = true;\n\n    if (userId) {\n      this.expenses = this.database.getUserExpenses(userId).subscribe(snapshots => this.filterData(snapshots));\n    } else {\n      this.isLoadingExpenses = false;\n    }\n  }\n\n  parseData(snapsShots) {\n    const data = [];\n    snapsShots.forEach(snapshot => {\n      const expense = snapshot.payload.exportVal();\n      expense.id = snapshot.key;\n      data.push(expense);\n    });\n    return data;\n  }\n\n  filterData(snapshots) {\n    this.isLoadingExpenses = false;\n    const parsedData = this.parseData(snapshots);\n    const firstDate = new Date(Math.min.apply(null, parsedData.map(e => new Date(e.date))));\n    const lastDate = new Date(Math.max.apply(null, parsedData.map(e => new Date(e.date))));\n    const numOfEntries = parsedData.length;\n    const totalAmount = this.getTotal(parsedData);\n    this.metrics = [{\n      color: null,\n      value: firstDate.toDateString().slice(3, 15),\n      metricTitle: 'First Expense Date',\n      icon: 'today'\n    }, {\n      color: null,\n      value: lastDate.toDateString().slice(3, 15),\n      metricTitle: 'Latest Expense Date',\n      icon: 'today'\n    }, {\n      color: null,\n      value: numOfEntries,\n      metricTitle: 'Number of Expenses',\n      icon: 'receipt'\n    }, {\n      color: 'money-icon',\n      value: totalAmount,\n      metricTitle: 'Total Amount',\n      icon: 'attach_money'\n    }];\n    this.categories = parsedData.map(item => item.category).filter((value, index, self) => self.indexOf(value) === index);\n    const pieData = [];\n\n    for (const category of this.categories) {\n      let categorySum = 0;\n\n      for (const value of parsedData) {\n        if (value.category === category) {\n          categorySum += value.amount;\n        }\n      }\n\n      const dataObj = {\n        name: category,\n        y: categorySum,\n        value: categorySum.toFixed(2)\n      };\n      pieData.push(dataObj);\n    }\n\n    this.expenseDataChart = pieData;\n    this.expenseDataTable = parsedData;\n    this.isDataReady = true;\n    this.isLoadingExpenses = false;\n  }\n\n  getTotal(expenses) {\n    let categorySum = 0;\n\n    for (const expense of expenses) {\n      categorySum += expense.amount;\n    }\n\n    return categorySum.toFixed(2);\n  }\n\n  getCategoryTotals(expenses) {// const categories = expenses\n    //   .map(item => item.category)\n    //   .filter((value, index, self) => self.indexOf(value) === index);\n    // const totals = [];\n    // for (const category of categories) {\n    //   let categorySum = 0;\n    //   for (const value of expenses) {\n    //     if (value.category === category) {\n    //       categorySum += value.amount as number;\n    //     }\n    //   }\n    //   const dataObj = {name: category, amount: categorySum.toFixed(2)};\n    //   totals.push(dataObj);\n    // }\n    // return totals.toString();\n  }\n\n  ngOnDestroy() {\n    if (this.expenses) {\n      this.expenses.unsubscribe();\n    }\n  }\n\n};\nViewLoggedExpensesComponent = __decorate([Component({\n  selector: 'app-view-logged-expenses',\n  templateUrl: './view-logged-expenses.component.html',\n  styleUrls: ['./view-logged-expenses.component.scss']\n})], ViewLoggedExpensesComponent);\nexport { ViewLoggedExpensesComponent };","map":null,"metadata":{},"sourceType":"module"}