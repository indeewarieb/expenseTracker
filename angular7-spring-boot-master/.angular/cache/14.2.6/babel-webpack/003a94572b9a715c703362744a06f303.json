{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { User } from '../models/user';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\"; //import { config } from '../';\n\nexport let AuthenticationService = /*#__PURE__*/(() => {\n  class AuthenticationService {\n    constructor(http) {\n      this.http = http;\n      this.userIdSet = new Subject();\n      this.userIdSetAnnounced$ = this.userIdSet.asObservable();\n      this.user = new User();\n      this.currentUserSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('currentUser')));\n      this.currentUser1 = this.currentUserSubject.asObservable();\n    }\n\n    announceUserIdCreated(message) {\n      this.userIdSet.next(message);\n    }\n\n    setUser(data) {\n      this.currentUser = data;\n    }\n\n    getUser() {\n      return this.currentUser;\n    }\n\n    setUserId(key) {\n      this.userId = key;\n    }\n\n    getUserId() {\n      return this.userId;\n    }\n\n    setCategories(originalCategories) {\n      this.categories = originalCategories;\n    }\n\n    getCurrentCategories() {\n      return this.categories;\n    }\n\n    get currentUserValue() {\n      return this.currentUserSubject.value;\n    }\n\n    login(username, password) {\n      console.log(\"userName \" + username);\n      this.user.userName = username;\n      this.user.password = password;\n      return this.http.post('http://localhost:8080/api/v1/users/authenticate', this.user).pipe(map(data => {\n        if (data[0] != null) {\n          this.setUser(data[0]);\n          localStorage.setItem('currentUser', JSON.stringify(data[0]));\n          console.log('currentUserId ' + data[0].id);\n          localStorage.setItem('currentUserId', data[0].id);\n          this.currentUserSubject.next(data[0]);\n          return data;\n        } else {}\n      }));\n    }\n\n    logout() {\n      // remove user from local storage and set current user to null\n      localStorage.removeItem('currentUser');\n      this.currentUserSubject.next(null);\n    }\n\n  }\n\n  AuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthenticationService;\n})();","map":null,"metadata":{},"sourceType":"module"}